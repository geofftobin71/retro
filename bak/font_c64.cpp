
#include "font.h"
#include "opengl.h"

// --------------------------------

const unsigned int font_bitmap[]=
{
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,

  0x00000000, 0x00000000, 0x18181818, 0x00180000, 0x00666666, 0x00000000, 0x66FF6666, 0x006666FF,   //  !"#
  0x3C067C18, 0x00183E60, 0x18306646, 0x0062660C, 0x1C3C663C, 0x00FC66E6, 0x00183060, 0x00000000,   // $%&'
  0x0C0C1830, 0x0030180C, 0x3030180C, 0x000C1830, 0xFF3C6600, 0x0000663C, 0x7E181800, 0x00001818,   // ()*+
  0x00000000, 0x0C181800, 0x7E000000, 0x00000000, 0x00000000, 0x00181800, 0x3060C000, 0x00060C18,   // ,-./
  0x6E76663C, 0x003C6666, 0x181C1818, 0x007E1818, 0x3060663C, 0x007E060C, 0x3860663C, 0x003C6660,   // 0123
  0x66787060, 0x006060FE, 0x603E067E, 0x003C6660, 0x3E06663C, 0x003C6666, 0x1830667E, 0x00181818,   // 4567
  0x3C66663C, 0x003C6666, 0x7C66663C, 0x003C6660, 0x00180000, 0x00001800, 0x00180000, 0x0C181800,   // 89:;
  0x060C1870, 0x0070180C, 0x007E0000, 0x0000007E, 0x6030180E, 0x000E1830, 0x3060663C, 0x00180018,   // <=>?

  0x7676663C, 0x003C4606, 0x7E663C18, 0x00666666, 0x3E66663E, 0x003E6666, 0x0606663C, 0x003C6606,   // @ABC
  0x6666361E, 0x001E3666, 0x1E06067E, 0x007E0606, 0x1E06067E, 0x00060606, 0x7606663C, 0x003C6666,   // DEFG
  0x7E666666, 0x00666666, 0x1818183C, 0x003C1818, 0x30303078, 0x001C3630, 0x0E1E3666, 0x0066361E,   // HIJK
  0x06060606, 0x007E0606, 0xD6FEEEC6, 0x00C6C6C6, 0x7E7E6E66, 0x00666676, 0x6666663C, 0x003C6666,   // LMNO
  0x3E66663E, 0x00060606, 0x6666663C, 0x00703C66, 0x3E66663E, 0x0066361E, 0x3C06663C, 0x003C6660,   // PQRS
  0x1818187E, 0x00181818, 0x66666666, 0x003C6666, 0x66666666, 0x00183C66, 0xD6C6C6C6, 0x00C6EEFE,   // TUVW
  0x183C6666, 0x0066663C, 0x3C666666, 0x00181818, 0x1830607E, 0x007E060C, 0x0C0C0C3C, 0x003C0C0C,   // XYZ[
  0x180C0600, 0x00C06030, 0x3030303C, 0x003C3030, 0x00663C18, 0x00000000, 0x00000000, 0x007E0000,   // \]^_

  0x00301818, 0x00000000, 0x603C0000, 0x007C667C, 0x3E060600, 0x003E6666, 0x063C0000, 0x003C0606,   // `abc
  0x7C606000, 0x007C6666, 0x663C0000, 0x003C067E, 0x3E0C3800, 0x000C0C0C, 0x667C0000, 0x3E607C66,   // defg
  0x3E060600, 0x00666666, 0x1C001800, 0x003C1818, 0x60006000, 0x3C606060, 0x36060600, 0x0066361E,   // hijk
  0x18181C00, 0x003C1818, 0xFE660000, 0x00C6D6FE, 0x663E0000, 0x00666666, 0x663C0000, 0x003C6666,   // lmno
  0x663E0000, 0x06063E66, 0x667C0000, 0x60607C66, 0x663E0000, 0x00060606, 0x067C0000, 0x003E603C,   // pqrs
  0x187E1800, 0x00701818, 0x66660000, 0x007C6666, 0x66660000, 0x00183C66, 0xD6C60000, 0x006C7CFE,   // tuvw
  0x3C660000, 0x00663C18, 0x66660000, 0x1E307C66, 0x307E0000, 0x007E0C18, 0x0C181830, 0x00301818,   // xyz{
  0x18181818, 0x00181818, 0x3018180C, 0x000C1818, 0x003B6E00, 0x00000000, 0x00000000, 0x00000000    // |}~
};

// --------------------------------

GLuint loadFont(GLenum _texture_unit)
{
  unsigned char font_image[128 * 128] {};
  const unsigned int* font_bitmap_ptr = font_bitmap;

  for(uint32_t tile_counter = 0; tile_counter < 16 * 8; ++tile_counter)
  {
    const uint32_t tile_x = tile_counter & 0xF;
    const uint32_t tile_y = tile_counter >> 4;

    unsigned int font_bits = *font_bitmap_ptr++;

    for(uint32_t i = 0; i < 32; ++i)
    {
      const uint32_t px = i & 0x7;
      const uint32_t py = i >> 3;

      if(font_bits & (1 << i))
      {
        font_image[128 * (tile_y * 8 + py) + (tile_x * 8 + px)] = 0xFF;
      }
      else
      {
        font_image[128 * (tile_y * 8 + py) + (tile_x * 8 + px)] = 0x00;
      }
    }

    font_bits = *font_bitmap_ptr++;

    for(uint32_t i = 0; i < 32; ++i)
    {
      const uint32_t px = i & 0x7;
      const uint32_t py = (i >> 3) + 4;

      if(font_bits & (1 << i))
      {
        font_image[128 * (tile_y * 8 + py) + (tile_x * 8 + px)] = 0xFF;
      }
      else
      {
        font_image[128 * (tile_y * 8 + py) + (tile_x * 8 + px)] = 0x00;
      }
    }
  }

  return createTexture(_texture_unit, 128, 128, font_image, GL_R8, GL_RED, GL_UNSIGNED_BYTE);
}

